# GitHub Actions Workflow - CI/CD Pipeline for StatusPage App on AWS EKS

name: CI/CD Pipeline

on:
  # Trigger pipeline on push or pull request to 'main' branch
  push:
    branches: [main]
  pull_request:
    branches: [main]

# Define reusable environment variables
env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
  IS_CI: true

########################
# CI Stage: Django Checks
########################
jobs:
  ci-check:
    name: "CI - Django Health Checks"
    runs-on: ubuntu-latest

    steps:
      # Checkout source code
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up Python runtime
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      # Install Python dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r statuspage_app/requirements.txt

      # Run Django system checks (e.g., URL conf, model structure)
      - name: Django system checks
        run: python statuspage_app/statuspage/manage.py check

      # Run Django unit tests
      - name: Run Django tests
        run: python statuspage_app/statuspage/manage.py test

#################################
# CI Stage: Security Scanning
#################################
  security-scan:
    name: "CI - Security Scanning"
    runs-on: ubuntu-latest
    needs: ci-check  # Run only if ci-check passes

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Install Bandit for Python code SAST (Static Application Security Testing)
      - name: Install Bandit
        run: pip install bandit

      # Run Bandit scan on Django source (excluding test directory)
      - name: Run Bandit scan
        run: bandit -r statuspage -x tests -ll

      # Install git-secrets tool to scan for hardcoded AWS credentials
      - name: Install git-secrets
        run: |
          git clone https://github.com/awslabs/git-secrets.git
          cd git-secrets && sudo make install

      # Run git-secrets scanning
      - name: Run git-secrets scan
        run: |
          git secrets --install
          git secrets --register-aws
          git secrets --scan

#########################################
# CI Stage: Docker Build, Scan & Push
#########################################
  docker-build:
    name: "CI - Docker Build, Scan & Push"
    runs-on: ubuntu-latest
    needs: security-scan

    outputs:
      image_tag: ${{ steps.set_tag.outputs.image_tag }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up Docker Buildx for multi-arch builds (future proof)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Configure AWS credentials to access ECR
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Authenticate Docker with Amazon ECR
      - name: Login to ECR
        run: |
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY

      # Build and push multi-arch Docker image (ARM64) for EKS
      - name: Build and Push Multi-Arch Docker Image
        id: set_tag
        run: |
          IMAGE_TAG=${ECR_REGISTRY}/${ECR_REPOSITORY}:${{ github.sha }}
          docker buildx build \
            --platform linux/amd64,linux/arm64 \
            -t $IMAGE_TAG \
            -t ${ECR_REGISTRY}/${ECR_REPOSITORY}:latest \
            --push ./statuspage_app
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
          echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT

      # Run vulnerability scan on Docker image using Trivy (multi-arch safe)
      - name: Scan Image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest
          format: 'table'
          ignore-unfixed: true

##############################
# CD Stage: Deploy to EKS
##############################
  deploy:
    name: "CD - Deploy to EKS"
    runs-on: ubuntu-latest
    needs: docker-build

    env:
      IMAGE_TAG: ${{ needs.docker-build.outputs.image_tag }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Install latest kubectl (from Kubernetes official source)
      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/v1.29.1/bin/linux/amd64/kubectl"
          chmod +x ./kubectl
          sudo mv ./kubectl /usr/local/bin/kubectl

      # Configure AWS credentials to access EKS
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Set up kubeconfig file from GitHub Secrets
      - name: Set up kubeconfig
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBE_CONFIG_DATA }}" | base64 -d > $HOME/.kube/config

      # Explicitly Set the Context in Your Deploy Job
      - name: Set kubectl context
        run: |
          kubectl config use-context arn:aws:eks:us-east-1:992382545251:cluster/statuspage-cluster-EI

      # Debug image tag
      - name: Debug image tag
        run: echo "Using image tag: ${{ env.IMAGE_TAG }}"

      # Update container image in EKS deployment using kubectl
      - name: Update deployment image in EKS
        run: |
          kubectl set image deployment/statuspage statuspage=${IMAGE_TAG} -n statuspage
          kubectl rollout status deployment/statuspage -n statuspage

#######################################
# Notification Stage: Email via Gmail
#######################################
  notify:
    name: "Send Email Notification"
    runs-on: ubuntu-latest
    needs: [ci-check, security-scan, docker-build, deploy]
    if: always()  # Run notification even if previous jobs fail

    steps:
      # Send email summary using Gmail SMTP
      - name: Send Email Notification
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.EMAIL_ADDRESS }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: GitHub Actions CI/CD - ${{ job.status }}
          to: ${{ secrets.EMAIL_ADDRESS }}
          from: "CI/CD Pipeline <${{ secrets.EMAIL_ADDRESS }}>"
          body: |
            Hello,

            The CI/CD pipeline run for repository ${{ github.repository }} has completed with status: ${{ job.status }}

            Branch: ${{ github.ref }}
            Workflow: ${{ github.workflow }}
            Run URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
